package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	syncoperations "github.com/codatio/client-sdk-go/sync-for-commerce/pkg/models/operations"
	"github.com/pj-simpson/graphdat/graph/model"
)

// LatestSync is the resolver for the latestSync field.
func (r *queryResolver) LatestSync(ctx context.Context, companyID string) (*model.LatestSyncResult, error) {
	//company for the request
	reqCompany := syncoperations.GetLatestSyncRequest{
		CompanyID: companyID,
	}

	//ignoring the request options for now as do not need to override any defaults.

	latestSyncResp, err := r.CodatClient.Sync.GetLatestSync(
		ctx,
		reqCompany,
	)

	if err != nil {
		return nil, fmt.Errorf("%g", err)
	}

	// instantiate variable to hold return type

	var latestSyncResult model.LatestSyncResult

	// handle upstream error from Codat system

	if latestSyncResp.StatusCode != 200 {
		latestSyncResult.Success = false
		latestSyncResult.Errors = append(latestSyncResult.Errors, latestSyncResp.ErrorMessage.Error)
		latestSyncResult.CodatStatusCode = &latestSyncResp.StatusCode
		latestSyncResult.LatestSync = nil
	} else {
		//success from Codat API
		//convert types
		latestSync := model.CompanySyncStatus(*latestSyncResp.CompanySyncStatus)

		latestSyncResult.Success = true
		latestSyncResult.Errors = nil
		latestSyncResult.CodatStatusCode = &latestSyncResp.StatusCode
		latestSyncResult.LatestSync = &latestSync
	}

	return &latestSyncResult, nil
}

// GetSync is the resolver for the getSync field.
func (r *queryResolver) GetSync(ctx context.Context, companyID string, syncID string) (*model.GetSyncResult, error) {
	//company and sync for the request
	reqCompanySync := syncoperations.GetSyncByIDRequest{
		CompanyID: companyID,
		SyncID:    syncID,
	}

	//ignoring the request options for now as do not need to override any defaults.

	SyncResp, err := r.CodatClient.Sync.Get(
		ctx,
		reqCompanySync,
	)

	if err != nil {
		return nil, fmt.Errorf("%g", err)
	}

	// instantiate variable to hold return type

	var SyncResult model.GetSyncResult

	// handle upstream error from Codat system

	if SyncResp.StatusCode != 200 {
		SyncResult.Success = false
		SyncResult.Errors = append(SyncResult.Errors, SyncResp.ErrorMessage.Error)
		SyncResult.CodatStatusCode = &SyncResp.StatusCode
		SyncResult.Sync = nil
	} else {
		//success from Codat API
		//convert types
		Sync := model.CompanySyncStatus(*SyncResp.CompanySyncStatus)

		SyncResult.Success = true
		SyncResult.Errors = nil
		SyncResult.CodatStatusCode = &SyncResp.StatusCode
		SyncResult.Sync = &Sync
	}

	return &SyncResult, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
